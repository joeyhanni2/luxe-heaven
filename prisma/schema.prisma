generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  firebaseUID   String?   @unique
  accounts      Account[]
  sessions      Session[]
  properties    Property[]
  notifications Notification[]
  payments      Payment[]
}

enum Role {
  ADMIN
  USER
}

model Property {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  location    String
  bedrooms    Int
  bathrooms   Int
  area        Float
  imageUrls   String[]
  type        String   // 'RENT' or 'SALE'
  status      String   // 'AVAILABLE', 'SOLD', 'RENTED'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  payments    Payment[]
  notifications Notification[]
}

model Payment {
  id          String   @id @default(cuid())
  amount      Float
  status      String   // 'PENDING', 'COMPLETED', 'CANCELLED'
  type        String   // 'RENT', 'PURCHASE'
  paypalOrderId String?
  createdAt   DateTime @default(now())
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Notification {
  id          String   @id @default(cuid())
  type        String   // 'RENT_REQUEST', 'PURCHASE_REQUEST', 'PAYMENT_RECEIVED'
  message     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentType {
  RENT
  PURCHASE
}